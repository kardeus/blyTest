// Generated by Dagger (https://dagger.dev).
package twin.jin.data.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import twin.jin.data.source.local.LocalDataSource;
import twin.jin.data.source.remote.AblyApi;
import twin.jin.domain.repository.ProductRepository;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OkHttpClientModule_ProvideRepositoryFactory implements Factory<ProductRepository> {
  private final Provider<LocalDataSource> localDataSourceProvider;

  private final Provider<AblyApi> apiProvider;

  public OkHttpClientModule_ProvideRepositoryFactory(
      Provider<LocalDataSource> localDataSourceProvider, Provider<AblyApi> apiProvider) {
    this.localDataSourceProvider = localDataSourceProvider;
    this.apiProvider = apiProvider;
  }

  @Override
  public ProductRepository get() {
    return provideRepository(localDataSourceProvider.get(), apiProvider.get());
  }

  public static OkHttpClientModule_ProvideRepositoryFactory create(
      Provider<LocalDataSource> localDataSourceProvider, Provider<AblyApi> apiProvider) {
    return new OkHttpClientModule_ProvideRepositoryFactory(localDataSourceProvider, apiProvider);
  }

  public static ProductRepository provideRepository(LocalDataSource localDataSource, AblyApi api) {
    return Preconditions.checkNotNullFromProvides(OkHttpClientModule.INSTANCE.provideRepository(localDataSource, api));
  }
}
