// Generated by Dagger (https://dagger.dev).
package twin.jin.data.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import twin.jin.data.source.local.ProductQuery;
import twin.jin.data.source.local.ProductRoomDatabase;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocalDataSourceModule_ProvideProductQueryFactory implements Factory<ProductQuery> {
  private final Provider<ProductRoomDatabase> productRoomDatabaseProvider;

  public LocalDataSourceModule_ProvideProductQueryFactory(
      Provider<ProductRoomDatabase> productRoomDatabaseProvider) {
    this.productRoomDatabaseProvider = productRoomDatabaseProvider;
  }

  @Override
  public ProductQuery get() {
    return provideProductQuery(productRoomDatabaseProvider.get());
  }

  public static LocalDataSourceModule_ProvideProductQueryFactory create(
      Provider<ProductRoomDatabase> productRoomDatabaseProvider) {
    return new LocalDataSourceModule_ProvideProductQueryFactory(productRoomDatabaseProvider);
  }

  public static ProductQuery provideProductQuery(ProductRoomDatabase productRoomDatabase) {
    return Preconditions.checkNotNullFromProvides(LocalDataSourceModule.INSTANCE.provideProductQuery(productRoomDatabase));
  }
}
