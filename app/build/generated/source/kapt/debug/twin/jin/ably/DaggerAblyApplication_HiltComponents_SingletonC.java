// Generated by Dagger (https://dagger.dev).
package twin.jin.ably;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import twin.jin.data.di.LocalDataSourceModule;
import twin.jin.data.di.LocalDataSourceModule_ProvideLocalDataSourceFactory;
import twin.jin.data.di.LocalDataSourceModule_ProvideProductQueryFactory;
import twin.jin.data.di.LocalDataSourceModule_ProvideRoomDatabaseFactory;
import twin.jin.data.di.OkHttpClientModule;
import twin.jin.data.di.OkHttpClientModule_ProvideOkHttpClientBuilderFactory;
import twin.jin.data.di.OkHttpClientModule_ProvideOkHttpClientFactory;
import twin.jin.data.di.OkHttpClientModule_ProvideRepositoryFactory;
import twin.jin.data.di.OkHttpClientModule_ProvideRetrofitFactory;
import twin.jin.data.di.RemoteDataSourceModule;
import twin.jin.data.di.RemoteDataSourceModule_ProvideAblyApiFactory;
import twin.jin.data.source.local.LocalDataSource;
import twin.jin.data.source.local.ProductQuery;
import twin.jin.data.source.local.ProductRoomDatabase;
import twin.jin.data.source.remote.AblyApi;
import twin.jin.domain.repository.ProductRepository;
import twin.jin.domain.usecase.GetFavoritesUseCase;
import twin.jin.domain.usecase.ProductPagingSourceUseCase;
import twin.jin.domain.usecase.SetFavoriteUseCase;
import twin.jin.presentation.ui.favorite.FavoriteFragment;
import twin.jin.presentation.ui.home.HomeFragment;
import twin.jin.presentation.ui.home.HomeViewModel;
import twin.jin.presentation.ui.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import twin.jin.presentation.ui.main.MainActivity;
import twin.jin.presentation.ui.main.MainSharedViewModel;
import twin.jin.presentation.ui.main.MainSharedViewModel_HiltModules_KeyModule_ProvideFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAblyApplication_HiltComponents_SingletonC extends AblyApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerAblyApplication_HiltComponents_SingletonC singletonC = this;

  private volatile Object productRoomDatabase = new MemoizedSentinel();

  private volatile Object productQuery = new MemoizedSentinel();

  private volatile Object localDataSource = new MemoizedSentinel();

  private volatile Object okHttpClientBuilder = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private volatile Object ablyApi = new MemoizedSentinel();

  private volatile Object productRepository = new MemoizedSentinel();

  private DaggerAblyApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private ProductRoomDatabase productRoomDatabase() {
    Object local = productRoomDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = productRoomDatabase;
        if (local instanceof MemoizedSentinel) {
          local = LocalDataSourceModule_ProvideRoomDatabaseFactory.provideRoomDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          productRoomDatabase = DoubleCheck.reentrantCheck(productRoomDatabase, local);
        }
      }
    }
    return (ProductRoomDatabase) local;
  }

  private ProductQuery productQuery() {
    Object local = productQuery;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = productQuery;
        if (local instanceof MemoizedSentinel) {
          local = LocalDataSourceModule_ProvideProductQueryFactory.provideProductQuery(productRoomDatabase());
          productQuery = DoubleCheck.reentrantCheck(productQuery, local);
        }
      }
    }
    return (ProductQuery) local;
  }

  private LocalDataSource localDataSource() {
    Object local = localDataSource;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = localDataSource;
        if (local instanceof MemoizedSentinel) {
          local = LocalDataSourceModule_ProvideLocalDataSourceFactory.provideLocalDataSource(productQuery());
          localDataSource = DoubleCheck.reentrantCheck(localDataSource, local);
        }
      }
    }
    return (LocalDataSource) local;
  }

  private OkHttpClient.Builder okHttpClientBuilder() {
    Object local = okHttpClientBuilder;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClientBuilder;
        if (local instanceof MemoizedSentinel) {
          local = OkHttpClientModule_ProvideOkHttpClientBuilderFactory.provideOkHttpClientBuilder(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          okHttpClientBuilder = DoubleCheck.reentrantCheck(okHttpClientBuilder, local);
        }
      }
    }
    return (OkHttpClient.Builder) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = OkHttpClientModule_ProvideOkHttpClientFactory.provideOkHttpClient(okHttpClientBuilder());
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = OkHttpClientModule_ProvideRetrofitFactory.provideRetrofit(okHttpClient());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private AblyApi ablyApi() {
    Object local = ablyApi;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = ablyApi;
        if (local instanceof MemoizedSentinel) {
          local = RemoteDataSourceModule_ProvideAblyApiFactory.provideAblyApi(retrofit());
          ablyApi = DoubleCheck.reentrantCheck(ablyApi, local);
        }
      }
    }
    return (AblyApi) local;
  }

  private ProductRepository productRepository() {
    Object local = productRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = productRepository;
        if (local instanceof MemoizedSentinel) {
          local = OkHttpClientModule_ProvideRepositoryFactory.provideRepository(localDataSource(), ablyApi());
          productRepository = DoubleCheck.reentrantCheck(productRepository, local);
        }
      }
    }
    return (ProductRepository) local;
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @Override
  public void injectAblyApplication(AblyApplication ablyApplication) {
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder localDataSourceModule(LocalDataSourceModule localDataSourceModule) {
      Preconditions.checkNotNull(localDataSourceModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder okHttpClientModule(OkHttpClientModule okHttpClientModule) {
      Preconditions.checkNotNull(okHttpClientModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder remoteDataSourceModule(RemoteDataSourceModule remoteDataSourceModule) {
      Preconditions.checkNotNull(remoteDataSourceModule);
      return this;
    }

    public AblyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerAblyApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements AblyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerAblyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public AblyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends AblyApplication_HiltComponents.ActivityRetainedC {
    private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerAblyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;


    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements AblyApplication_HiltComponents.ActivityC.Builder {
      private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public AblyApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends AblyApplication_HiltComponents.ActivityC {
      private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(2).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MainSharedViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      private static final class FragmentCBuilder implements AblyApplication_HiltComponents.FragmentC.Builder {
        private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public AblyApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends AblyApplication_HiltComponents.FragmentC {
        private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragmentParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        @Override
        public void injectFavoriteFragment(FavoriteFragment favoriteFragment) {
        }

        @Override
        public void injectHomeFragment(HomeFragment homeFragment) {
        }

        private static final class ViewWithFragmentCBuilder implements AblyApplication_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(
              DaggerAblyApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public AblyApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends AblyApplication_HiltComponents.ViewWithFragmentC {
          private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View viewParam) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;


          }
        }
      }

      private static final class ViewCBuilder implements AblyApplication_HiltComponents.ViewC.Builder {
        private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public AblyApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends AblyApplication_HiltComponents.ViewC {
        private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            View viewParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }
      }
    }

    private static final class ViewModelCBuilder implements AblyApplication_HiltComponents.ViewModelC.Builder {
      private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public AblyApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends AblyApplication_HiltComponents.ViewModelC {
      private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private volatile Provider<HomeViewModel> homeViewModelProvider;

      private volatile Provider<MainSharedViewModel> mainSharedViewModelProvider;

      private ViewModelCImpl(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      private ProductPagingSourceUseCase productPagingSourceUseCase() {
        return new ProductPagingSourceUseCase(singletonC.productRepository());
      }

      private HomeViewModel homeViewModel() {
        return new HomeViewModel(productPagingSourceUseCase());
      }

      private Provider<HomeViewModel> homeViewModelProvider() {
        Object local = homeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
          homeViewModelProvider = (Provider<HomeViewModel>) local;
        }
        return (Provider<HomeViewModel>) local;
      }

      private SetFavoriteUseCase setFavoriteUseCase() {
        return new SetFavoriteUseCase(singletonC.productRepository());
      }

      private GetFavoritesUseCase getFavoritesUseCase() {
        return new GetFavoritesUseCase(singletonC.productRepository());
      }

      private MainSharedViewModel mainSharedViewModel() {
        return new MainSharedViewModel(setFavoriteUseCase(), getFavoritesUseCase());
      }

      private Provider<MainSharedViewModel> mainSharedViewModelProvider() {
        Object local = mainSharedViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
          mainSharedViewModelProvider = (Provider<MainSharedViewModel>) local;
        }
        return (Provider<MainSharedViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(2).put("twin.jin.presentation.ui.home.HomeViewModel", (Provider) homeViewModelProvider()).put("twin.jin.presentation.ui.main.MainSharedViewModel", (Provider) mainSharedViewModelProvider()).build();
      }

      private static final class SwitchingProvider<T> implements Provider<T> {
        private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ViewModelCImpl viewModelCImpl;

        private final int id;

        SwitchingProvider(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.viewModelCImpl = viewModelCImpl;
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // twin.jin.presentation.ui.home.HomeViewModel 
            return (T) viewModelCImpl.homeViewModel();

            case 1: // twin.jin.presentation.ui.main.MainSharedViewModel 
            return (T) viewModelCImpl.mainSharedViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private static final class ServiceCBuilder implements AblyApplication_HiltComponents.ServiceC.Builder {
    private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerAblyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public AblyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends AblyApplication_HiltComponents.ServiceC {
    private final DaggerAblyApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerAblyApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}
